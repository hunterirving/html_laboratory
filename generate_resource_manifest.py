#!/usr/bin/env python3
"""
Generate resource manifest for PWA caching
Scans the images/ and resources/ directories and creates a JSON manifest file
"""

import os
import json
from pathlib import Path

def generate_resource_manifest():
    """Generate a JSON manifest of all resources in the images/ and resources/ directories"""
    
    # Define supported image extensions
    image_extensions = {'.png', '.jpg', '.jpeg', '.gif', '.svg', '.webp', '.ico', '.bmp'}
    
    # Get the directory where this script is located
    script_dir = Path(__file__).parent
    images_dir = script_dir / 'images'
    resources_dir = script_dir / 'resources'
    
    # Collect all image files
    image_files = []
    if images_dir.exists():
        for file_path in images_dir.iterdir():
            if file_path.is_file() and file_path.suffix.lower() in image_extensions:
                # Create relative path from web root (GitHub Pages subdirectory)
                relative_path = f"/web_workshop/images/{file_path.name}"
                image_files.append(relative_path)
    
    # Collect ALL resource files (no extension filtering)
    resource_files = []
    if resources_dir.exists():
        for file_path in resources_dir.rglob('*'):
            if file_path.is_file():
                # Create relative path from web root (GitHub Pages subdirectory)
                relative_path = f"/web_workshop/resources/{file_path.relative_to(resources_dir).as_posix()}"
                resource_files.append(relative_path)
    
    # Sort for consistent output
    image_files.sort()
    resource_files.sort()
    
    # Create manifest object
    manifest = {
        "images": image_files,
        "resources": resource_files,
        "generated_at": "auto-generated by GitHub Actions"
    }
    
    # Write manifest file
    manifest_path = script_dir / 'resource-manifest.json'
    with open(manifest_path, 'w', encoding='utf-8') as f:
        json.dump(manifest, f, indent=2, sort_keys=True)
    
    print(f"Generated manifest with {len(image_files)} images and {len(resource_files)} resources:")
    for img in image_files:
        print(f"  - {img}")
    for res in resource_files:
        print(f"  - {res}")
    
    return manifest

if __name__ == "__main__":
    manifest = generate_resource_manifest()
    print(f"\nManifest saved to: resource-manifest.json")